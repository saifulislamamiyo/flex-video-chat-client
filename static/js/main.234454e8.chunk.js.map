{"version":3,"sources":["logo.svg","components/VideoComp.js","components/example.js","App.js","serviceWorker.js","index.js"],"names":["twilioRuntimeDomain","createLocalVideoTrack","require","VideoComp","props","state","worker","token","identity","roomName","roomNameErr","previewTracks","localMediaAvailable","hasJoinedRoom","activeRoom","screenTrack","showPreview","isWaiting","alertData","joinRoom","bind","handleRoomNameChange","roomJoined","onLeaveRoom","detachParticipantTracks","attachLocalTracks","e","target","value","this","setState","console","log","connectOptions","name","Video","connect","then","error","alert","message","tracks","container","forEach","track","appendChild","attach","Array","isArray","trackDom","style","maxWidth","position","top","left","margin","zIndex","id","kind","participant","from","values","attachTracks","detach","detachedElement","remove","previewContainer","refs","remoteMedia","querySelector","customerName","number","fetch","encodeURIComponent","res","json","data","room","onCreateTask","localStorage","document","getElementById","children","localParticipant","childElements","i","length","child","removeChild","on","stop","participants","localMediaContainer","innerHTML","disconnect","Date","now","window","addEventListener","connectingButton","Button","color","disabled","defaultJoinOrLeaveRoomButton","onClick","joinOrLeaveRoomButton","className","ref","Component","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.234454e8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from \"react\";\nimport Video from \"twilio-video\";\nimport { Alert, Button } from \"reactstrap\";\n\nconst twilioRuntimeDomain = 'video-svc-5346-dev.twil.io';\nconst { createLocalVideoTrack } = require('twilio-video');\n\nexport default class VideoComp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      worker: \"\",\n      token: \"\",\n      identity: \"\",\n      roomName: \"\" /* Will store the room name */,\n      roomNameErr: false /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */,\n      previewTracks: null,\n      localMediaAvailable: false /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */,\n      hasJoinedRoom: false,\n      activeRoom: null, // Track the current active room\n      screenTrack: null,\n      showPreview: true,\n      isWaiting: false,\n      alertData: \"\"\n    };\n\n    this.joinRoom = this.joinRoom.bind(this);\n    this.handleRoomNameChange = this.handleRoomNameChange.bind(this);\n    this.roomJoined = this.roomJoined.bind(this);\n    this.onLeaveRoom = this.onLeaveRoom.bind(this);\n    this.detachParticipantTracks = this.detachParticipantTracks.bind(this);\n    this.attachLocalTracks = this.attachLocalTracks.bind(this);\n  }\n\n  handleRoomNameChange(e) {\n    /* Fetch room name from text field and update state */\n    let identity = e.target.value;\n    let roomName = e.target.value;\n    this.setState({ identity });\n    this.setState({ roomName });\n  }\n\n  joinRoom() {\n    this.setState({\n      identity: \"Khospace Delray Beach\",\n      isWaiting: true,\n      alertData: \"Joining room... \"\n    });\n\n    console.log(\"Joining room '\" + this.state.roomName + \"'...\");\n    let connectOptions = {\n      name: this.state.roomName\n    };\n\n    Video.connect(this.state.token, connectOptions).then(\n      this.roomJoined,\n      error => {\n        alert(\"Could not connect to Twilio: \" + error.message);\n      }\n    );\n  }\n\n\n  // Attach the Tracks to the DOM for others.\n  attachTracks(tracks, container) {\n    console.log(\"Saiful: attaching tracks:  \"+tracks);\n    tracks.forEach(track => {\n      container.appendChild(track.track.attach());\n    });\n  }\n\n  attachLocalTracks(tracks, container) {\n    console.log(\"Saiful: adding local tracks:  \"+tracks);\n    if(Array.isArray(tracks)){\n      tracks.forEach(track => {\n        let trackDom = track.track.attach();\n        trackDom.style.maxWidth = \"25%\";\n        trackDom.style.position = \"absolute\";\n        trackDom.style.top = \"-30%\";\n        trackDom.style.left = \"5%\";\n        trackDom.style.margin = \"0\";\n        trackDom.style.zIndex = \"1\";\n        trackDom.id = \"localVDO\";\n        if (track.kind == 'video'){\n          container.appendChild(trackDom);\n        }\n      });\n    }\n  }\n  // Attach the Participant's Tracks to the DOM.\n  attachParticipantTracks(participant, container) {\n    console.log(\"Saiful: already found participants: \"+participant.identity);\n    var tracks = Array.from(participant.tracks.values());\n    this.attachTracks(tracks, container);\n  }\n\n  // Detach the Tracks from the DOM.\n  detachTracks(tracks) {\n    tracks.forEach(function(track) {\n      track.detach().forEach(function(detachedElement) {\n        detachedElement.remove();\n      });\n    });\n  }\n\n  // Detach the Participant's Tracks from the DOM.\n  detachParticipantTracks(participant) {\n    var tracks = Array.from(participant.tracks.values());\n    var previewContainer = this.refs.remoteMedia;\n    if (!previewContainer.querySelector(\"video\")) {\n      this.detachParticipantTracks({ tracks: tracks }, previewContainer);\n    }\n  }\n\n  onCreateTask(roomName, customerName, worker, number) {\n    fetch(\n      `https://${twilioRuntimeDomain}/createvideotask?worker=${encodeURIComponent(\n        worker\n      )}&customerName=${customerName}&roomName=${roomName}&phoneNumber=${number}`\n    )\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"task data\", data);\n      });\n  }\n\n  roomJoined(room) {\n    // Called when a participant joins a room\n    console.log(\"Joined as '\" + this.state.identity + \"'\");\n    console.log(\"room name: \"+this.state.roomName);\n    this.setState({\n      activeRoom: room,\n      localMediaAvailable: true,\n      hasJoinedRoom: true, \n      showPreview: false,\n      alertData: \"Joined a room, waiting for an agent...\"\n    });\n\n    this.onCreateTask(\n      this.state.roomName,\n      this.state.identity,\n      localStorage.worker,\n      localStorage.number\n    );\n\n    // Attach LocalParticipant's tracks to the DOM, if not already attached.\n    var previewContainer = this.refs.remoteMedia;\n    console.log(document.getElementById('remote-media').children);\n\n    // add participant tracks\n    // room.participants.forEach((participant) => {\n    //   this.attachParticipantTracks(participant, this.refs.remoteMedia);\n    // });\n\n    // if (!previewContainer.querySelector(\"video\")) {\n      //this.attachParticipantTracks(room.localParticipant, previewContainer);\n      this.attachLocalTracks(Array.from(room.localParticipant.tracks.values()), this.refs.remoteMedia);\n      //document.getElementById('local-media').innerHTML='';\n      let childElements = document.getElementById('remote-media').children;\n      for(var i=0; i<childElements.length; i++){\n        var child = childElements[i];\n        console.log(\"Saiful: id is: \"+child.id);\n        if(child.id != 'localVDO'){\n          document.getElementById('remote-media').removeChild(child);\n        }\n      }\n    // }\n    \n    // Participant joining room\n    room.on(\"participantConnected\", participant => {\n      console.log(\"Agent joined: '\" + participant.identity + \"'\");\n      participant.on('trackSubscribed', track => {\n        console.log(participant.identity+ \"have added a track: \"+track.kind);\n        //var previewContainer = this.refs.remoteMedia;\n        //this.attachTracks([track], previewContainer);\n        this.setState({\n          alertData: \"Agent \"+participant.identity+\" has joined the room.\"\n        });\n        document.getElementById('remote-media').appendChild(track.attach());\n        // this.attachLocalTracks(Array.from(room.localParticipant.tracks.values()), this.refs.remoteMedia);\n      });\n    });\n\n    // Detach all participant’s track when they leave a room.\n    room.on(\"participantDisconnected\", participant => {\n      console.log(\"Participant '\" + participant.identity + \"' left the room\");\n      // this.detachParticipantTracks(participant);\n      //document.getElementById('remote-media').innerHTML='';\n      this.onLeaveRoom();\n    });\n\n    // Once the local participant leaves the room, detach the Tracks\n    // of all other participants, including that of the LocalParticipant.\n    room.on(\"disconnected\", () => {\n      console.log(\"Room disconnect.\")\n      if (this.state.previewTracks) {\n        this.state.previewTracks.forEach(track => {\n          track.stop();\n        });\n      }\n      this.detachParticipantTracks(room.localParticipant);\n      room.participants.forEach(this.detachParticipantTracks);\n      this.setState({\n        activeRoom: null,\n        hasJoinedRoom: false,\n        previewTracks: null,\n        localMediaAvailable: false,\n        showPreview: true,\n        isWaiting: false\n      });\n      createLocalVideoTrack().then(track => {\n        const localMediaContainer = document.getElementById('local-media');\n        if(track.kind == \"video\"){\n          localMediaContainer.appendChild(track.attach());\n        } \n      });\n      var remoteContainer = document.getElementById('remote-media');\n        if(remoteContainer){\n          document.getElementById('remote-media').innerHTML='';\n        }\n    });\n  }\n\n  onLeaveRoom() {\n    this.setState({\n      alertData: \"\"\n    });\n    this.state.activeRoom.disconnect();\n    var remoteContainer = document.getElementById('remote-media');\n    if(remoteContainer){\n      document.getElementById('remote-media').innerHTML='';\n    }\n    var localContainer = document.getElementById('local-media');\n    if(localContainer){\n      document.getElementById('local-media').innerHTML='';\n    }\n  }\n\n  componentDidMount() {\n    fetch(\n      `https://${twilioRuntimeDomain}/flexvideotokenizer?Identity=${\n        this.state.identity\n      }`\n    )\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"data:\", data);\n        this.setState({\n          token: data.token,\n          identity: data.identity,\n          roomName: 't-'+Date.now()\n        });\n        createLocalVideoTrack().then(track => {\n          const localMediaContainer = document.getElementById('local-media');\n          if(track.kind == \"video\"){\n            localMediaContainer.appendChild(track.attach());\n          } \n        });\n        window.addEventListener('beforeunload', () => this.onLeaveRoom());\n        window.addEventListener('pagehide', () => this.onLeaveRoom);\n        //this.joinRoom();\n        var remoteContainer = document.getElementById('remote-media');\n        if(remoteContainer){\n          document.getElementById('remote-media').innerHTML='';\n        }\n      });\n  }\n  \n\n  render() {\n    // Hide 'Join Room' button if user has already joined a room.\n    let connectingButton = (\n      <Button color=\"warning\" disabled>\n          Connecting...\n      </Button>\n    );\n    let defaultJoinOrLeaveRoomButton = this.state.isWaiting ? connectingButton : (\n      <div>\n        <Button color=\"success\" onClick={this.joinRoom}>\n          Start Video\n        </Button>\n      </div>\n    );\n    let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (\n      <Button color=\"danger\" onClick={this.onLeaveRoom}>\n        Hang Up\n      </Button>\n    ) : defaultJoinOrLeaveRoomButton ;\n    \n    return (\n      <div>\n          <div className=\"containerS\">\n              {this.state.showPreview ? (\n                  <div className=\"preview\">\n                    <div ref=\"localMedia\" \n                    id=\"local-media\"/>\n                  </div>\n                ) : <div className=\"remoteContainer\">\n                <div\n                  ref=\"remoteMedia\"\n                  id=\"remote-media\"\n                />\n                </div>}\n\n                <div className=\"buttonS\">\n                  {joinOrLeaveRoomButton}\n                </div>\n                <div color=\"primary\" className=\"alertS\" ref=\"alert\" id=\"alert-data\">\n                  {this.state.alertData}\n                </div>\n          </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Video from \"twilio-video\";\nimport { Container, Row, Col, Button, Input } from \"reactstrap\";\n\nexport default class ExampleComp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      worker: \"\",\n      token: \"\",\n      identity: \"\",\n      roomName: \"\" /* Will store the room name */,\n      roomNameErr: false /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */,\n      previewTracks: null,\n      localMediaAvailable: false /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */,\n      hasJoinedRoom: false,\n      activeRoom: null, // Track the current active room\n      screenTrack: null,\n      showPreview: true\n    };\n  }\n\n  render() {\n    // Hide 'Join Room' button if user has already joined a room.\n    let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (\n      <Button color=\"danger\" onClick={this.onLeaveRoom}>\n        Hang Up\n      </Button>\n    ) : (\n        <Button color=\"success\" onClick={this.joinRoom}>\n          Start Video\n        </Button>\n    );\n    \n    return (\n      <div>\n          <div className=\"containerS\">\n              {this.state.showPreview ? (\n                  <div className=\"preview\">\n                    <div ref=\"localMedia\" \n                    id=\"local-media\"/>\n                  </div>\n                ) : <div className=\"remoteContainer\">\n                <div\n                  ref=\"remoteMedia\"\n                  id=\"remote-media\"\n                />\n                </div>}\n\n                <div className=\"buttonS\">\n                  {joinOrLeaveRoomButton}\n                </div>\n          </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport VideoComp from './components/VideoComp';\nimport ExampleComp from './components/example';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VideoComp />\n      {/* <ExampleComp /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}