{"version":3,"sources":["logo.svg","components/VideoComp.js","App.js","serviceWorker.js","index.js"],"names":["twilioRuntimeDomain","createLocalVideoTrack","require","VideoComp","props","state","worker","token","identity","roomName","roomNameErr","previewTracks","localMediaAvailable","hasJoinedRoom","activeRoom","screenTrack","showPreview","joinRoom","bind","handleRoomNameChange","roomJoined","onLeaveRoom","detachParticipantTracks","attachLocalTracks","e","target","value","this","setState","console","log","connectOptions","name","tracks","Video","connect","then","error","alert","message","navigator","getDisplayMedia","video","mediaDevices","getUserMedia","mediaSource","container","forEach","track","appendChild","attach","Array","isArray","trackDom","style","maxWidth","position","top","left","margin","participant","from","values","attachTracks","detach","detachedElement","remove","previewContainer","refs","remoteMedia","querySelector","customerName","number","fetch","encodeURIComponent","res","json","data","room","onCreateTask","localStorage","localParticipant","on","kind","document","getElementById","stop","participants","localMediaContainer","disconnect","innerHTML","Date","now","window","addEventListener","joinOrLeaveRoomButton","Button","color","onClick","Container","fluid","Row","marginTop","xs","Col","className","ref","id","Component","App","Boolean","location","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86a5fa7d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from \"react\";\nimport Video from \"twilio-video\";\nimport { Container, Row, Col, Button, Input } from \"reactstrap\";\n\nconst twilioRuntimeDomain = 'video-svc-5346-dev.twil.io';\nconst { createLocalVideoTrack } = require('twilio-video');\n\nexport default class VideoComp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      worker: \"\",\n      token: \"\",\n      identity: \"\",\n      roomName: \"\" /* Will store the room name */,\n      roomNameErr: false /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */,\n      previewTracks: null,\n      localMediaAvailable: false /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */,\n      hasJoinedRoom: false,\n      activeRoom: null, // Track the current active room\n      screenTrack: null,\n      showPreview: true\n    };\n\n    this.joinRoom = this.joinRoom.bind(this);\n    this.handleRoomNameChange = this.handleRoomNameChange.bind(this);\n    this.roomJoined = this.roomJoined.bind(this);\n    this.onLeaveRoom = this.onLeaveRoom.bind(this);\n    this.detachParticipantTracks = this.detachParticipantTracks.bind(this);\n    this.attachLocalTracks = this.attachLocalTracks.bind(this);\n  }\n\n  handleRoomNameChange(e) {\n    /* Fetch room name from text field and update state */\n    let identity = e.target.value;\n    let roomName = e.target.value;\n    this.setState({ identity });\n    this.setState({ roomName });\n  }\n\n  joinRoom() {\n    /*\n   Show an error message on room name text field if user tries         joining a room without providing a room name. This is enabled by setting `roomNameErr` to true\n     */\n    // if (!this.state.roomName.trim()) {\n    //   this.setState({ roomNameErr: true });\n    //   return;\n    // }\n    this.state.roomName=\"Khospace Delray Beach\";\n\n    console.log(\"Joining room '\" + this.state.roomName + \"'...\");\n    let connectOptions = {\n      name: this.state.roomName\n    };\n\n    if (this.state.previewTracks) {\n      connectOptions.tracks = this.state.previewTracks;\n    }\n    Video.connect(this.state.token, connectOptions).then(\n      this.roomJoined,\n      error => {\n        alert(\"Could not connect to Twilio: \" + error.message);\n      }\n    );\n  }\n\n  // Screen sharing\n  getScreenShare() {\n    if (navigator.getDisplayMedia) {\n      return navigator.getDisplayMedia({ video: true });\n    } else if (navigator.mediaDevices.getDisplayMedia) {\n      return navigator.mediaDevices.getDisplayMedia({ video: true });\n    } else {\n      return navigator.mediaDevices.getUserMedia({\n        video: { mediaSource: \"screen\" }\n      });\n    }\n  }\n\n  // Attach the Tracks to the DOM for others.\n  attachTracks(tracks, container) {\n    console.log(\"Saiful: \"+tracks);\n    tracks.forEach(track => {\n      container.appendChild(track.track.attach());\n    });\n  }\n\n  attachLocalTracks(tracks, container) {\n    console.log(\"SaifulL: \"+tracks);\n    if(Array.isArray(tracks)){\n      tracks.forEach(track => {\n        let trackDom = track.track.attach();\n        trackDom.style.maxWidth = \"15%\";\n        trackDom.style.position = \"absolute\";\n        trackDom.style.top = \"20px\";\n        trackDom.style.left = \"50px\";\n        trackDom.style.left = \"0px\";\n        trackDom.style.margin = \"0\";\n        container.appendChild(trackDom);\n      });\n    }\n  }\n  // Attach the Participant's Tracks to the DOM.\n  attachParticipantTracks(participant, container) {\n    var tracks = Array.from(participant.tracks.values());\n    this.attachTracks(tracks, container);\n  }\n\n  // Detach the Tracks from the DOM.\n  detachTracks(tracks) {\n    tracks.forEach(function(track) {\n      track.detach().forEach(function(detachedElement) {\n        detachedElement.remove();\n      });\n    });\n  }\n\n  // Detach the Participant's Tracks from the DOM.\n  detachParticipantTracks(participant) {\n    var tracks = Array.from(participant.tracks.values());\n    var previewContainer = this.refs.remoteMedia;\n    if (!previewContainer.querySelector(\"video\")) {\n      this.detachParticipantTracks({ tracks: tracks }, previewContainer);\n    }\n  }\n\n  onCreateTask(roomName, customerName, worker, number) {\n    fetch(\n      `https://${twilioRuntimeDomain}/createvideotask?worker=${encodeURIComponent(\n        worker\n      )}&customerName=${customerName}&roomName=${roomName}&phoneNumber=${number}`\n    )\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"task data\", data);\n      });\n  }\n\n  roomJoined(room) {\n    // Called when a participant joins a room\n    console.log(\"Joined as '\" + this.state.identity + \"'\");\n    this.setState({\n      activeRoom: room,\n      localMediaAvailable: true,\n      hasJoinedRoom: true // Removes ‘Join Room’ button and shows ‘Leave Room’\n    });\n\n    this.onCreateTask(\n      this.state.roomName,\n      this.state.roomName,\n      localStorage.worker,\n      localStorage.number\n    );\n\n    // Attach LocalParticipant's tracks to the DOM, if not already attached.\n    var previewContainer = this.refs.remoteMedia;\n\n    if (!previewContainer.querySelector(\"video\")) {\n      //this.attachParticipantTracks(room.localParticipant, previewContainer);\n      this.attachLocalTracks(Array.from(room.localParticipant.tracks.values()), this.refs.remoteMedia);\n      //document.getElementById('local-media').innerHTML='';\n      \n    }\n    \n    // Participant joining room\n    room.on(\"participantConnected\", participant => {\n      console.log(\"Joining: '\" + participant.identity + \"'\");\n      participant.on('trackSubscribed', track => {\n        console.log(participant.identity+ \"have added a track: \"+track.kind);\n        //var previewContainer = this.refs.remoteMedia;\n        //this.attachTracks([track], previewContainer);\n        this.setState({\n          showPreview: false\n        });\n        document.getElementById('remote-media').appendChild(track.attach());\n        // this.attachLocalTracks(Array.from(room.localParticipant.tracks.values()), this.refs.remoteMedia);\n      });\n    });\n\n    // Detach all participant’s track when they leave a room.\n    room.on(\"participantDisconnected\", participant => {\n      console.log(\"Participant '\" + participant.identity + \"' left the room\");\n      // this.detachParticipantTracks(participant);\n      //document.getElementById('remote-media').innerHTML='';\n      this.onLeaveRoom();\n    });\n\n    // Once the local participant leaves the room, detach the Tracks\n    // of all other participants, including that of the LocalParticipant.\n    room.on(\"disconnected\", () => {\n      console.log(\"Room disconnect.\")\n      if (this.state.previewTracks) {\n        this.state.previewTracks.forEach(track => {\n          track.stop();\n        });\n      }\n      this.detachParticipantTracks(room.localParticipant);\n      room.participants.forEach(this.detachParticipantTracks);\n      this.setState({\n        activeRoom: null,\n        hasJoinedRoom: false,\n        previewTracks: null,\n        localMediaAvailable: false,\n        showPreview: true\n      });\n      createLocalVideoTrack().then(track => {\n        const localMediaContainer = document.getElementById('local-media');\n        if(track.kind == \"video\"){\n          localMediaContainer.appendChild(track.attach());\n        } \n      });\n    });\n  }\n\n  onLeaveRoom() {\n    this.state.activeRoom.disconnect();\n    document.getElementById('remote-media').innerHTML='';\n    document.getElementById('local-media').innerHTML='';\n  }\n\n  componentDidMount() {\n    fetch(\n      `https://${twilioRuntimeDomain}/flexvideotokenizer?Identity=${\n        this.state.identity\n      }`\n    )\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"data:\", data);\n        this.setState({\n          token: data.token,\n          identity: data.identity,\n          roomName: Date.now()\n        });\n        createLocalVideoTrack().then(track => {\n          const localMediaContainer = document.getElementById('local-media');\n          if(track.kind == \"video\"){\n            localMediaContainer.appendChild(track.attach());\n          } \n        });\n        window.addEventListener('beforeunload', () => this.onLeaveRoom());\n        window.addEventListener('pagehide', () => this.onLeaveRoom);\n        //this.joinRoom();\n      });\n  }\n  \n\n  render() {\n    // Hide 'Join Room' button if user has already joined a room.\n    let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (\n      <Button color=\"danger\" onClick={this.onLeaveRoom}>\n        Hang Up\n      </Button>\n    ) : (\n      <div>\n        <Button color=\"success\" onClick={this.joinRoom}>\n          Start Video\n        </Button>\n      </div>\n    );\n    \n    return (\n      <div>\n          <Container fluid={true}>\n            <Row style={{ marginTop: 25 }} xs=\"2\">\n              <Col xs=\"5\">\n                {this.state.showPreview ? (\n                  <div className=\"preview\">\n                    <div ref=\"localMedia\" \n                    id=\"local-media\"/>\n                  </div>\n                ) : null}\n                <div className=\"remoteContainer\">\n                  <div\n                    ref=\"remoteMedia\"\n                    id=\"remote-media\"\n                  />\n                </div>\n              </Col>\n              <Col>\n                {joinOrLeaveRoomButton}\n              </Col>\n            </Row>\n          </Container>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport VideoComp from './components/VideoComp';\nimport ExampleComp from './components/example';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VideoComp />\n      {/* <ExampleComp /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}