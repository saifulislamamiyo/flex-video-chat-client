{"version":3,"sources":["components/VideoComp.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["VideoComp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","worker","token","identity","roomName","roomNameErr","previewTracks","localMediaAvailable","hasJoinedRoom","activeRoom","screenTrack","joinRoom","bind","assertThisInitialized","handleRoomNameChange","roomJoined","onPreviewVideo","onPreviewStop","onLeaveRoom","onShareScreen","onStopShareScreen","detachParticipantTracks","e","target","value","setState","console","log","connectOptions","name","tracks","Video","connect","then","error","alert","message","navigator","getDisplayMedia","video","mediaDevices","getUserMedia","mediaSource","container","forEach","track","appendChild","attach","participant","Array","from","values","attachTracks","detach","detachedElement","remove","previewContainer","refs","localMedia","querySelector","_this2","Promise","resolve","createLocalTracks","attachParticipantTracks","detachTracks","_this3","getScreenShare","stream","getVideoTracks","localParticipant","publishTrack","unpublishTrack","customerName","number","fetch","concat","encodeURIComponent","res","json","data","room","_this4","onCreateTask","localStorage","participants","remoteMedia","on","kind","stop","disconnect","_this5","Date","now","shareScreenButton","joinOrLeaveRoomButton","react_default","a","createElement","Button","color","onClick","Row","style","marginTop","Col","md","className","ref","id","Container","Input","placeholder","onChange","Component","App","VideoComp_VideoComp","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.5a87d036.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Video from \"twilio-video\";\nimport { Container, Row, Col, Button, Input } from \"reactstrap\";\n\nconst twilioRuntimeDomain = 'video-svc-5346-dev.twil.io';\n\nexport default class VideoComp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      worker: \"\",\n      token: \"\",\n      identity: \"\",\n      roomName: \"\" /* Will store the room name */,\n      roomNameErr: false /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */,\n      previewTracks: null,\n      localMediaAvailable: false /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */,\n      hasJoinedRoom: false,\n      activeRoom: null, // Track the current active room\n      screenTrack: null\n    };\n\n    this.joinRoom = this.joinRoom.bind(this);\n    this.handleRoomNameChange = this.handleRoomNameChange.bind(this);\n    this.roomJoined = this.roomJoined.bind(this);\n    this.onPreviewVideo = this.onPreviewVideo.bind(this);\n    this.onPreviewStop = this.onPreviewStop.bind(this);\n    this.onLeaveRoom = this.onLeaveRoom.bind(this);\n    this.onShareScreen = this.onShareScreen.bind(this);\n    this.onStopShareScreen = this.onStopShareScreen.bind(this);\n    this.detachParticipantTracks = this.detachParticipantTracks.bind(this);\n  }\n\n  handleRoomNameChange(e) {\n    /* Fetch room name from text field and update state */\n    let identity = e.target.value;\n    let roomName = e.target.value;\n    this.setState({ identity });\n    this.setState({ roomName });\n  }\n\n  joinRoom() {\n    /*\n   Show an error message on room name text field if user tries         joining a room without providing a room name. This is enabled by setting `roomNameErr` to true\n     */\n    // if (!this.state.roomName.trim()) {\n    //   this.setState({ roomNameErr: true });\n    //   return;\n    // }\n\n    console.log(\"Joining room '\" + this.state.roomName + \"'...\");\n    let connectOptions = {\n      name: this.state.roomName\n    };\n\n    if (this.state.previewTracks) {\n      connectOptions.tracks = this.state.previewTracks;\n    }\n    Video.connect(this.state.token, connectOptions).then(\n      this.roomJoined,\n      error => {\n        alert(\"Could not connect to Twilio: \" + error.message);\n      }\n    );\n  }\n\n  // Screen sharing\n  getScreenShare() {\n    if (navigator.getDisplayMedia) {\n      return navigator.getDisplayMedia({ video: true });\n    } else if (navigator.mediaDevices.getDisplayMedia) {\n      return navigator.mediaDevices.getDisplayMedia({ video: true });\n    } else {\n      return navigator.mediaDevices.getUserMedia({\n        video: { mediaSource: \"screen\" }\n      });\n    }\n  }\n\n  // Attach the Tracks to the DOM.\n  attachTracks(tracks, container) {\n    tracks.forEach(track => {\n      container.appendChild(track.track.attach());\n    });\n  }\n\n  // Attach the Participant's Tracks to the DOM.\n  attachParticipantTracks(participant, container) {\n    var tracks = Array.from(participant.tracks.values());\n    this.attachTracks(tracks, container);\n  }\n\n  // Detach the Tracks from the DOM.\n  detachTracks(tracks) {\n    tracks.forEach(function(track) {\n      track.detach().forEach(function(detachedElement) {\n        detachedElement.remove();\n      });\n    });\n  }\n\n  // Detach the Participant's Tracks from the DOM.\n  detachParticipantTracks(participant) {\n    var tracks = Array.from(participant.tracks.values());\n    var previewContainer = this.refs.localMedia;\n    if (!previewContainer.querySelector(\"video\")) {\n      this.detachParticipantTracks({ tracks: tracks }, previewContainer);\n    }\n  }\n\n  onPreviewVideo() {\n    var localTracksPromise = this.state.previewTracks\n      ? Promise.resolve(this.state.previewTracks)\n      : Video.createLocalTracks();\n\n    localTracksPromise.then(\n      tracks => {\n        this.setState({\n          previewTracks: tracks\n        });\n\n        var previewContainer = this.refs.localMedia;\n        if (!previewContainer.querySelector(\"video\")) {\n          this.attachParticipantTracks({ tracks: tracks }, previewContainer);\n        }\n      },\n      function(error) {\n        console.error(\"Unable to access local media\", error);\n      }\n    );\n  }\n\n  onPreviewStop() {\n    this.detachTracks(this.state.previewTracks);\n\n    this.setState({\n      previewTracks: null\n    });\n  }\n\n  onShareScreen() {\n    this.getScreenShare().then(stream => {\n      this.setState({\n        screenTrack: stream.getVideoTracks()[0]\n      });\n      this.state.activeRoom.localParticipant.publishTrack(\n        stream.getVideoTracks()[0]\n      );\n      // document.getElementById(\"share-screen\").style.display = 'none';\n      // document.getElementById(\"stop-share-screen\").style.display = 'inline';\n    });\n  }\n\n  onStopShareScreen() {\n    this.state.activeRoom.localParticipant.unpublishTrack(\n      this.state.screenTrack\n    );\n    this.setState({\n      screenTrack: null\n    });\n  }\n\n  onCreateTask(roomName, customerName, worker, number) {\n    fetch(\n      `https://${twilioRuntimeDomain}/createvideotask?worker=${encodeURIComponent(\n        worker\n      )}&customerName=${customerName}&roomName=${roomName}&phoneNumber=${number}`\n    )\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"task data\", data);\n      });\n  }\n\n  roomJoined(room) {\n    // Called when a participant joins a room\n    console.log(\"Joined as '\" + this.state.identity + \"'\");\n    this.setState({\n      activeRoom: room,\n      localMediaAvailable: true,\n      hasJoinedRoom: true // Removes ‘Join Room’ button and shows ‘Leave Room’\n    });\n\n    this.onCreateTask(\n      this.state.roomName,\n      this.state.roomName,\n      localStorage.worker,\n      localStorage.number\n    );\n\n    // Attach LocalParticipant's tracks to the DOM, if not already attached.\n    var previewContainer = this.refs.localMedia;\n    if (!previewContainer.querySelector(\"video\")) {\n      this.attachParticipantTracks(room.localParticipant, previewContainer);\n    }\n\n    if (!previewContainer.querySelector(\"video\")) {\n      this.attachParticipantTracks(room.localParticipant, previewContainer);\n    }\n\n    // Attach the Tracks of the room's participants.\n    room.participants.forEach(participant => {\n      console.log(\"Already in Room: '\" + participant.identity + \"'\");\n      var previewContainer = this.refs.remoteMedia;\n      this.attachParticipantTracks(participant, previewContainer);\n    });\n\n    // Participant joining room\n    room.on(\"participantConnected\", participant => {\n      console.log(\"Joining: '\" + participant.identity + \"'\");\n    });\n\n    // Attach participant’s tracks to DOM when they add a track\n    room.on(\"trackAdded\", (track, participant) => {\n      console.log(participant.identity + \" added track: \" + track.kind);\n      var previewContainer = this.refs.remoteMedia;\n      this.attachTracks([track], previewContainer);\n    });\n\n    // Detach participant’s track from DOM when they remove a track.\n    room.on(\"trackRemoved\", (track, participant) => {\n      console.log(participant.identity + \" removed track: \" + track.kind);\n      this.detachTracks([track]);\n    });\n\n    // Detach all participant’s track when they leave a room.\n    room.on(\"participantDisconnected\", participant => {\n      console.log(\"Participant '\" + participant.identity + \"' left the room\");\n      this.detachParticipantTracks(participant);\n    });\n\n    // Once the local participant leaves the room, detach the Tracks\n    // of all other participants, including that of the LocalParticipant.\n    room.on(\"disconnected\", () => {\n      if (this.state.previewTracks) {\n        this.state.previewTracks.forEach(track => {\n          track.stop();\n        });\n      }\n      this.detachParticipantTracks(room.localParticipant);\n      room.participants.forEach(this.detachParticipantTracks);\n      this.setState({\n        activeRoom: null,\n        hasJoinedRoom: false,\n        previewTracks: null,\n        localMediaAvailable: false\n      });\n    });\n  }\n\n  onLeaveRoom() {\n    this.state.activeRoom.disconnect();\n  }\n\n  componentDidMount() {\n    fetch(\n      `https://${twilioRuntimeDomain}/flexvideotokenizer?Identity=${\n        this.state.identity\n      }`\n    )\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"data:\", data);\n        this.setState({\n          token: data.token,\n          identity: data.identity,\n          roomName: Date.now()\n        });\n        //this.joinRoom();\n      });\n  }\n\n  render() {\n    // Hide 'Join Room' button if user has already joined a room.\n    let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (\n      <Button color=\"danger\" onClick={this.onLeaveRoom}>\n        Hang Up\n      </Button>\n    ) : (\n      <div>\n        <Button color=\"success\" onClick={this.joinRoom}>\n          Start Video\n        </Button>\n      </div>\n    );\n\n    let shareScreenButton;\n\n    if (this.state.hasJoinedRoom && !this.state.screenTrack) {\n      shareScreenButton = (\n        <Button color=\"success\" onClick={this.onShareScreen}>\n          Share Screen\n        </Button>\n      );\n    } else if (this.state.hasJoinedRoom && this.state.screenTrack) {\n      shareScreenButton = (\n        <Button color=\"danger\" onClick={this.onStopShareScreen}>\n          Stop Sharing\n        </Button>\n      );\n    } else {\n      shareScreenButton = null;\n    }\n\n    let previewVideo;\n\n    if (this.state.previewTracks && !this.state.hasJoinedRoom) {\n      previewVideo = <Button onClick={this.onPreviewStop}>Stop Preview</Button>;\n    } else if (this.state.hasJoinedRoom) {\n      previewVideo = null;\n    } else {\n      previewVideo = (\n        <Button onClick={this.onPreviewVideo}>Preview Video</Button>\n      );\n    }\n\n    return (\n      <div>\n        <Row style={{ marginTop: 10 }}>\n          <Col md=\"12\">\n            <div\n              className=\"remoteContainer\"\n              ref=\"remoteMedia\"\n              id=\"remote-media\"\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col md=\"6\" className=\"text-center\">\n            <div className=\"preview\">\n              <div ref=\"localMedia\" />\n            </div>\n          </Col>\n        </Row>\n        <Container>\n          <Row>\n            <Col md=\"4\">\n              <br />\n              {!this.state.hasJoinedRoom ? (\n                <Input\n                  value={this.state.identity ? this.state.identity : \"\"}\n                  placeholder=\"Customer Name\"\n                  onChange={this.handleRoomNameChange}\n                />\n              ) : null}\n              <br />\n              <Row>\n                {joinOrLeaveRoomButton}\n                <span>&nbsp;</span>\n                {shareScreenButton}\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport VideoComp from './components/VideoComp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VideoComp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}