{"version":3,"sources":["logo.svg","components/VideoComp.js","App.js","serviceWorker.js","index.js"],"names":["twilioRuntimeDomain","VideoComp","props","state","worker","token","identity","roomName","roomNameErr","previewTracks","localMediaAvailable","hasJoinedRoom","activeRoom","screenTrack","joinRoom","bind","handleRoomNameChange","roomJoined","onPreviewVideo","onPreviewStop","onLeaveRoom","onShareScreen","onStopShareScreen","detachParticipantTracks","e","target","value","this","setState","console","log","connectOptions","name","tracks","Video","connect","then","error","alert","message","navigator","getDisplayMedia","video","mediaDevices","getUserMedia","mediaSource","container","forEach","track","appendChild","attach","participant","Array","from","values","attachTracks","detach","detachedElement","remove","previewContainer","refs","localMedia","querySelector","Promise","resolve","createLocalTracks","attachParticipantTracks","detachTracks","getScreenShare","stream","getVideoTracks","localParticipant","publishTrack","unpublishTrack","customerName","number","fetch","encodeURIComponent","res","json","data","room","onCreateTask","localStorage","participants","remoteMedia","on","kind","document","getElementById","innerHTML","stop","disconnect","Date","now","joinOrLeaveRoomButton","Button","color","onClick","Row","style","marginTop","Col","md","className","ref","id","Container","Input","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"oLAAe,I,iHCITA,EAAsB,6BAEPC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRC,MAAO,GACPC,SAAU,GACVC,SAAU,GACVC,aAAa,EACbC,cAAe,KACfC,qBAAqB,EACrBC,eAAe,EACfC,WAAY,KACZC,YAAa,MAGf,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBACtB,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBACrB,EAAKK,YAAc,EAAKA,YAAYL,KAAjB,gBACnB,EAAKM,cAAgB,EAAKA,cAAcN,KAAnB,gBACrB,EAAKO,kBAAoB,EAAKA,kBAAkBP,KAAvB,gBACzB,EAAKQ,wBAA0B,EAAKA,wBAAwBR,KAA7B,gBAvBd,E,wDA0BnB,SAAqBS,GAEnB,IAAIlB,EAAWkB,EAAEC,OAAOC,MACpBnB,EAAWiB,EAAEC,OAAOC,MACxBC,KAAKC,SAAS,CAAEtB,aAChBqB,KAAKC,SAAS,CAAErB,e,sBAGlB,WASEsB,QAAQC,IAAI,iBAAmBH,KAAKxB,MAAMI,SAAW,QACrD,IAAIwB,EAAiB,CACnBC,KAAML,KAAKxB,MAAMI,UAGfoB,KAAKxB,MAAMM,gBACbsB,EAAeE,OAASN,KAAKxB,MAAMM,eAErCyB,IAAMC,QAAQR,KAAKxB,MAAME,MAAO0B,GAAgBK,KAC9CT,KAAKV,YACL,SAAAoB,GACEC,MAAM,gCAAkCD,EAAME,c,4BAMpD,WACE,OAAIC,UAAUC,gBACLD,UAAUC,gBAAgB,CAAEC,OAAO,IACjCF,UAAUG,aAAaF,gBACzBD,UAAUG,aAAaF,gBAAgB,CAAEC,OAAO,IAEhDF,UAAUG,aAAaC,aAAa,CACzCF,MAAO,CAAEG,YAAa,c,0BAM5B,SAAaZ,EAAQa,GACnBb,EAAOc,SAAQ,SAAAC,GACbF,EAAUG,YAAYD,EAAMA,MAAME,e,qCAKtC,SAAwBC,EAAaL,GACnC,IAAIb,EAASmB,MAAMC,KAAKF,EAAYlB,OAAOqB,UAC3C3B,KAAK4B,aAAatB,EAAQa,K,0BAI5B,SAAab,GACXA,EAAOc,SAAQ,SAASC,GACtBA,EAAMQ,SAAST,SAAQ,SAASU,GAC9BA,EAAgBC,iB,qCAMtB,SAAwBP,GACtB,IAAIlB,EAASmB,MAAMC,KAAKF,EAAYlB,OAAOqB,UACvCK,EAAmBhC,KAAKiC,KAAKC,WAC5BF,EAAiBG,cAAc,UAClCnC,KAAKJ,wBAAwB,CAAEU,OAAQA,GAAU0B,K,4BAIrD,WAAkB,IAAD,QACUhC,KAAKxB,MAAMM,cAChCsD,QAAQC,QAAQrC,KAAKxB,MAAMM,eAC3ByB,IAAM+B,qBAES7B,MACjB,SAAAH,GACE,EAAKL,SAAS,CACZnB,cAAewB,IAGjB,IAAI0B,EAAmB,EAAKC,KAAKC,WAC5BF,EAAiBG,cAAc,UAClC,EAAKI,wBAAwB,CAAEjC,OAAQA,GAAU0B,MAGrD,SAAStB,GACPR,QAAQQ,MAAM,+BAAgCA,Q,2BAKpD,WACEV,KAAKwC,aAAaxC,KAAKxB,MAAMM,eAE7BkB,KAAKC,SAAS,CACZnB,cAAe,S,2BAInB,WAAiB,IAAD,OACdkB,KAAKyC,iBAAiBhC,MAAK,SAAAiC,GACzB,EAAKzC,SAAS,CACZf,YAAawD,EAAOC,iBAAiB,KAEvC,EAAKnE,MAAMS,WAAW2D,iBAAiBC,aACrCH,EAAOC,iBAAiB,S,+BAO9B,WACE3C,KAAKxB,MAAMS,WAAW2D,iBAAiBE,eACrC9C,KAAKxB,MAAMU,aAEbc,KAAKC,SAAS,CACZf,YAAa,S,0BAIjB,SAAaN,EAAUmE,EAActE,EAAQuE,GAC3CC,MAAM,WAAD,OACQ5E,EADR,mCACsD6E,mBACvDzE,GAFC,yBAGesE,EAHf,qBAGwCnE,EAHxC,wBAGgEoE,IAElEvC,MAAK,SAAA0C,GAAG,OAAIA,EAAIC,UAChB3C,MAAK,SAAA4C,GACJnD,QAAQC,IAAI,YAAakD,Q,wBAI/B,SAAWC,GAAO,IAAD,OAEfpD,QAAQC,IAAI,cAAgBH,KAAKxB,MAAMG,SAAW,KAClDqB,KAAKC,SAAS,CACZhB,WAAYqE,EACZvE,qBAAqB,EACrBC,eAAe,IAGjBgB,KAAKuD,aACHvD,KAAKxB,MAAMI,SACXoB,KAAKxB,MAAMI,SACX4E,aAAa/E,OACb+E,aAAaR,QAIf,IAAIhB,EAAmBhC,KAAKiC,KAAKC,WAC5BF,EAAiBG,cAAc,UAClCnC,KAAKuC,wBAAwBe,EAAKV,iBAAkBZ,GAGjDA,EAAiBG,cAAc,UAClCnC,KAAKuC,wBAAwBe,EAAKV,iBAAkBZ,GAItDsB,EAAKG,aAAarC,SAAQ,SAAAI,GACxBtB,QAAQC,IAAI,qBAAuBqB,EAAY7C,SAAW,KAC1D,IAAIqD,EAAmB,EAAKC,KAAKyB,YACjC,EAAKnB,wBAAwBf,EAAaQ,MAI5CsB,EAAKK,GAAG,wBAAwB,SAAAnC,GAC9BtB,QAAQC,IAAI,aAAeqB,EAAY7C,SAAW,KAClD6C,EAAYmC,GAAG,mBAAmB,SAAAtC,GAChCnB,QAAQC,IAAIqB,EAAY7C,SAAU,uBAAuB0C,EAAMuC,MACxC,EAAK3B,KAAKyB,YAEjCG,SAASC,eAAe,gBAAgBxC,YAAYD,EAAME,gBAM9D+B,EAAKK,GAAG,kBAAkB,SAACtC,EAAOG,GAChCtB,QAAQC,IAAIqB,EAAY7C,SAAW,iBAAmB0C,EAAMuC,MAC5D,IAAI5B,EAAmB,EAAKC,KAAKyB,YACjC,EAAK9B,aAAa,CAACP,GAAQW,MAI7BsB,EAAKK,GAAG,oBAAoB,SAACtC,EAAOG,GAClCtB,QAAQC,IAAIqB,EAAY7C,SAAW,mBAAqB0C,EAAMuC,MAC9D,EAAKpB,aAAa,CAACnB,OAIrBiC,EAAKK,GAAG,2BAA2B,SAAAnC,GACjCtB,QAAQC,IAAI,gBAAkBqB,EAAY7C,SAAW,mBACrD,EAAKiB,wBAAwB4B,GAC7BqC,SAASC,eAAe,gBAAgBC,UAAU,MAKpDT,EAAKK,GAAG,gBAAgB,WAClB,EAAKnF,MAAMM,eACb,EAAKN,MAAMM,cAAcsC,SAAQ,SAAAC,GAC/BA,EAAM2C,UAGV,EAAKpE,wBAAwB0D,EAAKV,kBAClCU,EAAKG,aAAarC,QAAQ,EAAKxB,yBAC/B,EAAKK,SAAS,CACZhB,WAAY,KACZD,eAAe,EACfF,cAAe,KACfC,qBAAqB,S,yBAK3B,WACEiB,KAAKxB,MAAMS,WAAWgF,aACtBJ,SAASC,eAAe,gBAAgBC,UAAU,K,+BAGpD,WAAqB,IAAD,OAClBd,MAAM,WAAD,OACQ5E,EADR,wCAED2B,KAAKxB,MAAMG,WAGZ8B,MAAK,SAAA0C,GAAG,OAAIA,EAAIC,UAChB3C,MAAK,SAAA4C,GACJnD,QAAQC,IAAI,QAASkD,GACrB,EAAKpD,SAAS,CACZvB,MAAO2E,EAAK3E,MACZC,SAAU0E,EAAK1E,SACfC,SAAUsF,KAAKC,a,oBAMvB,WAEE,IAAIC,EAAwBpE,KAAKxB,MAAMQ,cACrC,cAACqF,EAAA,EAAD,CAAQC,MAAM,SAASC,QAASvE,KAAKP,YAArC,qBAIA,8BACE,cAAC4E,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASvE,KAAKb,SAAtC,2BAoCJ,OA5BIa,KAAKxB,MAAMQ,gBAAkBgB,KAAKxB,MAAMU,YAExC,cAACmF,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASvE,KAAKN,cAAtC,0BAIOM,KAAKxB,MAAMQ,eAAiBgB,KAAKxB,MAAMU,YAE9C,cAACmF,EAAA,EAAD,CAAQC,MAAM,SAASC,QAASvE,KAAKL,kBAArC,0BAKkB,KAKlBK,KAAKxB,MAAMM,gBAAkBkB,KAAKxB,MAAMQ,cAC3B,cAACqF,EAAA,EAAD,CAAQE,QAASvE,KAAKR,cAAtB,0BACNQ,KAAKxB,MAAMQ,cACL,KAGb,cAACqF,EAAA,EAAD,CAAQE,QAASvE,KAAKT,eAAtB,2BAKF,gCACE,cAACiF,EAAA,EAAD,CAAKC,MAAO,CAAEC,UAAW,IAAzB,SACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,qBACEC,UAAU,kBACVC,IAAI,cACJC,GAAG,qBAIT,cAACP,EAAA,EAAD,UACE,cAACG,EAAA,EAAD,CAAKC,GAAG,IAAIC,UAAU,cAAtB,SACE,qBAAKA,UAAU,UAAf,SACE,qBAAKC,IAAI,qBAIf,cAACE,EAAA,EAAD,UACE,cAACR,EAAA,EAAD,UACE,eAACG,EAAA,EAAD,CAAKC,GAAG,IAAR,UACI5E,KAAKxB,MAAMQ,cAMT,KALF,cAACiG,EAAA,EAAD,CACElF,MAAOC,KAAKxB,MAAMG,SAAWqB,KAAKxB,MAAMG,SAAW,GACnDuG,YAAY,gBACZC,SAAUnF,KAAKX,uBAGnB,uBACA,cAACmF,EAAA,EAAD,UACGJ,kB,GA7VsBgB,aCOxBC,MARf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,OCIcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAAS/B,SAASC,eAAe,SD2H3C,kBAAmBjD,WACrBA,UAAUgF,cAAcC,MAAMrF,MAAK,SAAAsF,GACjCA,EAAaC,iB","file":"static/js/main.303986c2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from \"react\";\nimport Video from \"twilio-video\";\nimport { Container, Row, Col, Button, Input } from \"reactstrap\";\n\nconst twilioRuntimeDomain = 'video-svc-5346-dev.twil.io';\n\nexport default class VideoComp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      worker: \"\",\n      token: \"\",\n      identity: \"\",\n      roomName: \"\" /* Will store the room name */,\n      roomNameErr: false /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */,\n      previewTracks: null,\n      localMediaAvailable: false /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */,\n      hasJoinedRoom: false,\n      activeRoom: null, // Track the current active room\n      screenTrack: null\n    };\n\n    this.joinRoom = this.joinRoom.bind(this);\n    this.handleRoomNameChange = this.handleRoomNameChange.bind(this);\n    this.roomJoined = this.roomJoined.bind(this);\n    this.onPreviewVideo = this.onPreviewVideo.bind(this);\n    this.onPreviewStop = this.onPreviewStop.bind(this);\n    this.onLeaveRoom = this.onLeaveRoom.bind(this);\n    this.onShareScreen = this.onShareScreen.bind(this);\n    this.onStopShareScreen = this.onStopShareScreen.bind(this);\n    this.detachParticipantTracks = this.detachParticipantTracks.bind(this);\n  }\n\n  handleRoomNameChange(e) {\n    /* Fetch room name from text field and update state */\n    let identity = e.target.value;\n    let roomName = e.target.value;\n    this.setState({ identity });\n    this.setState({ roomName });\n  }\n\n  joinRoom() {\n    /*\n   Show an error message on room name text field if user tries         joining a room without providing a room name. This is enabled by setting `roomNameErr` to true\n     */\n    // if (!this.state.roomName.trim()) {\n    //   this.setState({ roomNameErr: true });\n    //   return;\n    // }\n\n    console.log(\"Joining room '\" + this.state.roomName + \"'...\");\n    let connectOptions = {\n      name: this.state.roomName\n    };\n\n    if (this.state.previewTracks) {\n      connectOptions.tracks = this.state.previewTracks;\n    }\n    Video.connect(this.state.token, connectOptions).then(\n      this.roomJoined,\n      error => {\n        alert(\"Could not connect to Twilio: \" + error.message);\n      }\n    );\n  }\n\n  // Screen sharing\n  getScreenShare() {\n    if (navigator.getDisplayMedia) {\n      return navigator.getDisplayMedia({ video: true });\n    } else if (navigator.mediaDevices.getDisplayMedia) {\n      return navigator.mediaDevices.getDisplayMedia({ video: true });\n    } else {\n      return navigator.mediaDevices.getUserMedia({\n        video: { mediaSource: \"screen\" }\n      });\n    }\n  }\n\n  // Attach the Tracks to the DOM.\n  attachTracks(tracks, container) {\n    tracks.forEach(track => {\n      container.appendChild(track.track.attach());\n    });\n  }\n\n  // Attach the Participant's Tracks to the DOM.\n  attachParticipantTracks(participant, container) {\n    var tracks = Array.from(participant.tracks.values());\n    this.attachTracks(tracks, container);\n  }\n\n  // Detach the Tracks from the DOM.\n  detachTracks(tracks) {\n    tracks.forEach(function(track) {\n      track.detach().forEach(function(detachedElement) {\n        detachedElement.remove();\n      });\n    });\n  }\n\n  // Detach the Participant's Tracks from the DOM.\n  detachParticipantTracks(participant) {\n    var tracks = Array.from(participant.tracks.values());\n    var previewContainer = this.refs.localMedia;\n    if (!previewContainer.querySelector(\"video\")) {\n      this.detachParticipantTracks({ tracks: tracks }, previewContainer);\n    }\n  }\n\n  onPreviewVideo() {\n    var localTracksPromise = this.state.previewTracks\n      ? Promise.resolve(this.state.previewTracks)\n      : Video.createLocalTracks();\n\n    localTracksPromise.then(\n      tracks => {\n        this.setState({\n          previewTracks: tracks\n        });\n\n        var previewContainer = this.refs.localMedia;\n        if (!previewContainer.querySelector(\"video\")) {\n          this.attachParticipantTracks({ tracks: tracks }, previewContainer);\n        }\n      },\n      function(error) {\n        console.error(\"Unable to access local media\", error);\n      }\n    );\n  }\n\n  onPreviewStop() {\n    this.detachTracks(this.state.previewTracks);\n\n    this.setState({\n      previewTracks: null\n    });\n  }\n\n  onShareScreen() {\n    this.getScreenShare().then(stream => {\n      this.setState({\n        screenTrack: stream.getVideoTracks()[0]\n      });\n      this.state.activeRoom.localParticipant.publishTrack(\n        stream.getVideoTracks()[0]\n      );\n      // document.getElementById(\"share-screen\").style.display = 'none';\n      // document.getElementById(\"stop-share-screen\").style.display = 'inline';\n    });\n  }\n\n  onStopShareScreen() {\n    this.state.activeRoom.localParticipant.unpublishTrack(\n      this.state.screenTrack\n    );\n    this.setState({\n      screenTrack: null\n    });\n  }\n\n  onCreateTask(roomName, customerName, worker, number) {\n    fetch(\n      `https://${twilioRuntimeDomain}/createvideotask?worker=${encodeURIComponent(\n        worker\n      )}&customerName=${customerName}&roomName=${roomName}&phoneNumber=${number}`\n    )\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"task data\", data);\n      });\n  }\n\n  roomJoined(room) {\n    // Called when a participant joins a room\n    console.log(\"Joined as '\" + this.state.identity + \"'\");\n    this.setState({\n      activeRoom: room,\n      localMediaAvailable: true,\n      hasJoinedRoom: true // Removes ‘Join Room’ button and shows ‘Leave Room’\n    });\n\n    this.onCreateTask(\n      this.state.roomName,\n      this.state.roomName,\n      localStorage.worker,\n      localStorage.number\n    );\n\n    // Attach LocalParticipant's tracks to the DOM, if not already attached.\n    var previewContainer = this.refs.localMedia;\n    if (!previewContainer.querySelector(\"video\")) {\n      this.attachParticipantTracks(room.localParticipant, previewContainer);\n    }\n\n    if (!previewContainer.querySelector(\"video\")) {\n      this.attachParticipantTracks(room.localParticipant, previewContainer);\n    }\n\n    // Attach the Tracks of the room's participants.\n    room.participants.forEach(participant => {\n      console.log(\"Already in Room: '\" + participant.identity + \"'\");\n      var previewContainer = this.refs.remoteMedia;\n      this.attachParticipantTracks(participant, previewContainer);\n    });\n\n    // Participant joining room\n    room.on(\"participantConnected\", participant => {\n      console.log(\"Joining: '\" + participant.identity + \"'\");\n      participant.on('trackSubscribed', track => {\n        console.log(participant.identity+ \"have added a track: \"+track.kind);\n        var previewContainer = this.refs.remoteMedia;\n        //this.attachTracks([track], previewContainer);\n        document.getElementById('remote-media').appendChild(track.attach());\n        //document.getElementById('remote-media-div').appendChild(track.attach());\n      });\n    });\n\n    // Attach participant’s tracks to DOM when they add a track\n    room.on(\"trackPublished\", (track, participant) => {\n      console.log(participant.identity + \" added track: \" + track.kind);\n      var previewContainer = this.refs.remoteMedia;\n      this.attachTracks([track], previewContainer);\n    });\n\n    // Detach participant’s track from DOM when they remove a track.\n    room.on(\"trackUnpublished\", (track, participant) => {\n      console.log(participant.identity + \" removed track: \" + track.kind);\n      this.detachTracks([track]);\n    });\n\n    // Detach all participant’s track when they leave a room.\n    room.on(\"participantDisconnected\", participant => {\n      console.log(\"Participant '\" + participant.identity + \"' left the room\");\n      this.detachParticipantTracks(participant);\n      document.getElementById('remote-media').innerHTML='';\n    });\n\n    // Once the local participant leaves the room, detach the Tracks\n    // of all other participants, including that of the LocalParticipant.\n    room.on(\"disconnected\", () => {\n      if (this.state.previewTracks) {\n        this.state.previewTracks.forEach(track => {\n          track.stop();\n        });\n      }\n      this.detachParticipantTracks(room.localParticipant);\n      room.participants.forEach(this.detachParticipantTracks);\n      this.setState({\n        activeRoom: null,\n        hasJoinedRoom: false,\n        previewTracks: null,\n        localMediaAvailable: false\n      });\n    });\n  }\n\n  onLeaveRoom() {\n    this.state.activeRoom.disconnect();\n    document.getElementById('remote-media').innerHTML='';\n  }\n\n  componentDidMount() {\n    fetch(\n      `https://${twilioRuntimeDomain}/flexvideotokenizer?Identity=${\n        this.state.identity\n      }`\n    )\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"data:\", data);\n        this.setState({\n          token: data.token,\n          identity: data.identity,\n          roomName: Date.now()\n        });\n        //this.joinRoom();\n      });\n  }\n\n  render() {\n    // Hide 'Join Room' button if user has already joined a room.\n    let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (\n      <Button color=\"danger\" onClick={this.onLeaveRoom}>\n        Hang Up\n      </Button>\n    ) : (\n      <div>\n        <Button color=\"success\" onClick={this.joinRoom}>\n          Start Video\n        </Button>\n      </div>\n    );\n\n    let shareScreenButton;\n\n    if (this.state.hasJoinedRoom && !this.state.screenTrack) {\n      shareScreenButton = (\n        <Button color=\"success\" onClick={this.onShareScreen}>\n          Share Screen\n        </Button>\n      );\n    } else if (this.state.hasJoinedRoom && this.state.screenTrack) {\n      shareScreenButton = (\n        <Button color=\"danger\" onClick={this.onStopShareScreen}>\n          Stop Sharing\n        </Button>\n      );\n    } else {\n      shareScreenButton = null;\n    }\n\n    let previewVideo;\n\n    if (this.state.previewTracks && !this.state.hasJoinedRoom) {\n      previewVideo = <Button onClick={this.onPreviewStop}>Stop Preview</Button>;\n    } else if (this.state.hasJoinedRoom) {\n      previewVideo = null;\n    } else {\n      previewVideo = (\n        <Button onClick={this.onPreviewVideo}>Preview Video</Button>\n      );\n    }\n\n    return (\n      <div>\n        <Row style={{ marginTop: 10 }}>\n          <Col md=\"12\">\n            <div\n              className=\"remoteContainer\"\n              ref=\"remoteMedia\"\n              id=\"remote-media\"\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col md=\"6\" className=\"text-center\">\n            <div className=\"preview\">\n              <div ref=\"localMedia\" />\n            </div>\n          </Col>\n        </Row>\n        <Container>\n          <Row>\n            <Col md=\"4\">\n              {!this.state.hasJoinedRoom ? (\n                <Input\n                  value={this.state.identity ? this.state.identity : \"\"}\n                  placeholder=\"Customer Name\"\n                  onChange={this.handleRoomNameChange}\n                />\n              ) : null}\n              <br />\n              <Row>\n                {joinOrLeaveRoomButton}\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport VideoComp from './components/VideoComp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VideoComp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}